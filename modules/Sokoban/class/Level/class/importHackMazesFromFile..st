importHackMazesFromFile: aString	"inspectIt: [self importHackMazesFromFile: './SokobanPuzzles/loma.txt']"	"inspectIt: [self importHackMazesFromFile: './SokobanPuzzles/masmicroban.txt']"	"inspectIt: [self importHackMazesFromFile: './SokobanPuzzles/massasquatch.txt']"	"inspectIt: [self importHackMazesFromFile: './SokobanPuzzles/microban.txt']"	"inspectIt: [self importHackMazesFromFile: './SokobanPuzzles/sasquatch.txt']"	"inspectIt: [self importHackMazesFromFile: './SokobanPuzzles/sasquatchiii.txt']"	"inspectIt: [self importHackMazesFromFile: './SokobanPuzzles/sasquatchiv.txt']"	"inspectIt: [self importHackMazesFromFile: './SokobanPuzzles/sasquatchv.txt']"	"inspectIt: [self importHackMazesFromFile: './SokobanPuzzles/sasquatchvi.txt']"	| lines imported lastLineWasEmpty count maze beforeFirst code |	self flag: #rhi. "Very bad, but good enough..."	lines := (FileStream fileNamed: (FileDirectory pathFromURI: aString)) contentsOfEntireFile findTokens: String crlf.	imported := IdentityDictionary new.	lastLineWasEmpty := true.	count := 0.	lines do: [:line |		(line withBlanksTrimmed isEmpty or: [#($; $') includes: line first])			ifTrue: [lastLineWasEmpty := true]			ifFalse: [				lastLineWasEmpty ifTrue: [					lastLineWasEmpty := false.					count := count + 1].				(imported at: count ifAbsentPut: [OrderedCollection new]) add: line]].	"-=-=-=-=-=-=-=-=-=-="	imported copy keysAndValuesDo: [:idx :coll |		maze := WriteStream on: String new.		beforeFirst := true.		coll do: [:line |			beforeFirst				ifTrue: [beforeFirst := false]				ifFalse: [maze nextPut: Character lf].			maze nextPutAll: line].		imported at: idx put: maze contents].	"-=-=-=-=-=-=-=-=-=-="	code := WriteStream with: '	^ IdentityDictionary new'.	imported keysAndValuesDo: [:idx :str |		code			cr;			nextPutAll: '		at: ';			nextPutAll: idx printString;			nextPutAll: ' put: ';			nextPutAll: str printString;			nextPut: $;].	"-=-=-=-=-=-=-=-=-=-="	^ code contents