postInclude: aClass	 " find conflicts "	| instSelectors classSelectors instConflicts classConflicts currentClass |	instSelectors := IdentitySet new.	classSelectors := IdentitySet new.	instConflicts := IdentitySet new.	classConflicts := IdentitySet new.	currentClass := aClass.	[ currentClass isNestedGenerated and: [ currentClass outer isKindOf: Trait ] ] whileTrue: [		currentClass selectorsDo: [ :selector | 			(instSelectors includes: selector)				ifTrue: [ instConflicts add: selector ]				ifFalse: [ instSelectors add: selector ] ].		currentClass class selectorsDo: [ :selector | 			(classSelectors includes: selector)				ifTrue: [ classConflicts add: selector ]				ifFalse: [ classSelectors add: selector ] ]. 		currentClass := currentClass superclass ].		aClass selectorsDo: [ :selector | instConflicts remove: selector ifAbsent: [ ] ].	aClass class selectorsDo: [ :selector | classConflicts remove: selector ifAbsent: [ ] ].		instConflicts ifNotEmpty: [ self notify: 'Unresolved trait conflicts detected on instance side: ', instConflicts asArray asString ].	classConflicts ifNotEmpty: [ self notify: 'Unresolved trait conflicts detected on class side: ', classConflicts asArray asString ].