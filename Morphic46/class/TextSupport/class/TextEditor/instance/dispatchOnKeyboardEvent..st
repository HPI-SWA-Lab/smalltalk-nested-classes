dispatchOnKeyboardEvent: aKeyboardEvent 	"Carry out the action associated with this character, if any.  	Type-ahead is passed so some routines can flush or use it."	| honorCommandKeys typedChar |	((typedChar := aKeyboardEvent keyCharacter) == Character cr and: [ morph acceptOnCR ]) ifTrue:		[ self closeTypeIn.		^ true ].	self clearParens.	aKeyboardEvent keyValue = 13 ifTrue:		[ aKeyboardEvent controlKeyPressed ifTrue: [ ^ self normalCharacter: aKeyboardEvent ].		aKeyboardEvent shiftPressed ifTrue: [ ^ self lf: aKeyboardEvent ].		aKeyboardEvent commandKeyPressed ifTrue: [ ^ self crlf: aKeyboardEvent ].		^ self crWithIndent: aKeyboardEvent ].	((honorCommandKeys := Preferences cmdKeysInText) and: [ typedChar = Character enter ]) ifTrue: [ ^ self dispatchOnEnterWith: aKeyboardEvent ].	"Special keys overwrite crtl+key combinations - at least on Windows. To resolve this	conflict, assume that keys other than cursor keys aren't used together with Crtl."	((self class specialShiftCmdKeys includes: aKeyboardEvent keyValue) and: [ aKeyboardEvent keyValue < 27 ]) ifTrue: [ ^ aKeyboardEvent controlKeyPressed			ifTrue:				[ self					perform: (self class shiftCmdActions at: aKeyboardEvent keyValue + 1)					with: aKeyboardEvent ]			ifFalse:				[ self					perform: (self class cmdActions at: aKeyboardEvent keyValue + 1)					with: aKeyboardEvent ] ].	"backspace, and escape keys (ascii 8 and 27) are command keys"	((honorCommandKeys and: [ aKeyboardEvent commandKeyPressed ]) or: [ self class specialShiftCmdKeys includes: aKeyboardEvent keyValue ]) ifTrue: [ ^ aKeyboardEvent shiftPressed			ifTrue:				[ self					perform: (self class shiftCmdActions at: aKeyboardEvent keyValue + 1)					with: aKeyboardEvent ]			ifFalse:				[ self					perform: (self class cmdActions at: aKeyboardEvent keyValue + 1)					with: aKeyboardEvent ] ].	"the control key can be used to invoke shift-cmd shortcuts"	(honorCommandKeys and: [ aKeyboardEvent controlKeyPressed ]) ifTrue: [ ^ self			perform: (self class shiftCmdActions at: aKeyboardEvent keyValue + 1)			with: aKeyboardEvent ].	self class autoEnclose		ifTrue: [ (self autoEncloseFor: typedChar) ifFalse: [ self normalCharacter: aKeyboardEvent ] ]		ifFalse: [ self normalCharacter: aKeyboardEvent ].	^ false